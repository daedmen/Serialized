<!--

    Serialized - PHP Library for Serialized Data

    Copyright (C) 2010-2011 Tom Klingenberg, some rights reserved

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU Affero General Public License as
    published by the Free Software Foundation, either version 3 of the
    License, or (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Affero General Public License for more details.

    You should have received a copy of the GNU Affero General Public License
    along with this program in a file called COPYING. If not, see
    <http://www.gnu.org/licenses/> and please report back to the original
    author.

 	============

    This is Serialized DTD.

    Serialized includes the superset of PHP serialized
    types and their values.

        Draft: 0.2.0 alpha

        Authors:
            Tom Klingenberg
            Patrick C. Engel

     Further information about Serialized is available at:

         https://github.com/ktomk/Serialized

-->

<!--====== datatypes ======-->

<!ENTITY % type.simple " null | bool | int | float | string " >
<!ENTITY % type.complex " array | object " >
<!ENTITY % type.base " %type.simple; | %type.complex; " >
<!ENTITY % type.recursion " recursion | recursionref " >
<!ENTITY % type.all " %type.simple; | %type.complex; | %type.recursion; " >

<!--====== named values ======-->

<!ENTITY % Int "CDATA" >
	<!-- an integer value -->

<!ENTITY % AbsInt "%Int;" >
	<!-- a positive integer value or 0 -->

<!ENTITY % PositiveInt "%Int;" >
	<!-- a positive integer value greater 0 -->

<!ENTITY % Count "%AbsInt;" >
	<!-- Count, 0 or positive integer -->

<!ENTITY % Bool "(true|false)" >
	<!-- a boolean value -->

<!ENTITY % Float "CDATA" >
	<!-- a float value -->

<!ENTITY % Strlen "%AbsInt;" >
	<!-- Length of a string, 0 or positive integer -->

<!ENTITY % Ref "%PositiveInt;" >
	<!-- Reference index of/to an existing element, a positive integer -->

<!ENTITY % KeyType "(string|int)" >
	<!-- Array keys can be either string or integer  -->

<!ENTITY % PropAccess "(public|protected|private)" >
	<!-- Property Access can either be public, protected or private -->

<!--====== root ======-->

<!ELEMENT serialized ( variables|%type.base; )>

<!--====== simple/simple ======-->

<!ELEMENT null EMPTY >

<!ELEMENT bool EMPTY >
<!ATTLIST bool
  value %Bool; #REQUIRED
  >

<!ELEMENT int EMPTY >
<!ATTLIST int
  value %Int; #REQUIRED
  >

<!ELEMENT float EMPTY >
<!ATTLIST float
  value %Float; #REQUIRED
  >

<!ELEMENT string EMPTY >
<!ATTLIST string
  len   %Strlen; #REQUIRED
  value CDATA    #REQUIRED
  >

<!--====== compound ======-->

<!ELEMENT array ( item* ) >
<!ATTLIST array
  members %Count; #REQUIRED
  >

<!ELEMENT item ( %type.all; ) >
<!ATTLIST item
  name CDATA     #REQUIRED
  type %KeyType; #REQUIRED
  >

<!ELEMENT object ( property* ) >
<!ATTLIST object
  class   CDATA   #REQUIRED
  members NMTOKEN #REQUIRED
  >

<!ELEMENT property ( %type.all; ) >
<!ATTLIST property
  class  CDATA        #IMPLIED
  access %PropAccess; "public"
  name   CDATA        #REQUIRED
  >

<!--====== recursion ======-->

<!ELEMENT recursion EMPTY >
<!ATTLIST recursion
  value %Ref; #REQUIRED
  >

<!ELEMENT recursionref EMPTY >
<!ATTLIST recursionref
  value %Ref; #REQUIRED
  >

<!--====== session ======-->

<!ELEMENT variables ( var* ) >
<!ATTLIST variables
  count %Count; #IMPLIED
  >

<!ELEMENT var ( %type.base; )  >
<!ATTLIST var
  name CDATA #REQUIRED
  >